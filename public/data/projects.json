[
  {
    "id": "Ariホームページ制作（コーポレートサイト)",
    "title": "Ariホームページ制作",
    "titleNumber": "001",
    "siteType": "コーポレートサイト",
    "siteUrl": "https://ari-life.com",
    "ProjectImge": "/arihomepage.png",
    "techStack": [
      "HTML",
      "CSS",
      "JavaScript",
      "GSAPP(ScrollTrigger/ScrollTo)",
      "PHP(コンタクトフォーム)",
      "Composer",
      "Bootstrap(コンタクトフォーム)",
      "Figma(デザイン)",
      "GitHub Actions(テスト環境デプロイの自動化)"
    ],
    "projectDsc": "自身のWeb制作受注用のコーポレートサイトです。\nHTMLとCSS、JavaScriptで制作された静的サイトです。\nお問い合わせフォームはPHPで自作で制作しております。reCAPTCHAのv3を導入し、スパム対策やセキュリティ対策を考慮しました。",
    "timeSpent": "14日間",
    "gitUrl": "https://github.com/Arilifecom/ari-life-front",
    "motivation": "より分かりやすく伝えたい",
    "motivationText": "知り合いづてに「Webサイトを持ちたい」という方がいらっしゃったため、Web制作の注文から公開までの流れをシンプルに伝えられるサイトを制作しました。\nこれまでにWebサイトを持ったことがない方に、一連の流れを口頭で説明するのは難しいという課題があり、そこでWebサイトを見せながら、流れを具体的にご説明させていただくことを目的として作成しました。",
    "focusPoints": [
      {
        "focus": "シンプルで分かりやすい設計",
        "focusText": "サイト内の情報を過不足なく、かつスムーズに伝えるために、シンプルなデザインを心がけました。\nWebサイト制作を検討している方に、必要な情報を順を追って提供できるよう、JavaScriptでアコーディオンを実装しました。これにより、初見の表示文字数を少なくし、段階的に必要な情報を確認できるようにしました。\n実際に「このくらいシンプルなサイトが欲しい」とのフィードバックをいただき、Webサイトの制作をご依頼いただきました。"
      }
    ],
    "challengePoints": [
      {
        "challenge": "コンタクトフォームの実装",
        "challengeText": "より円滑なコミュニケーションが取れるように、フォームでのお問い合わせを可能にしたいと考えました。しかし、フォームのセキュリティ対策が課題となりました。",
        "solution": "UdemyでPHPの基礎を学び、セキュリティを考慮したフォームを実装しました。XAMPを取り入れ、ローカル環境を用意し、各対策（入力内容の検証、XSS、CSRF、CAPTCHAv3）を行い安全に運用できるフォームを設置しました。"
      },
      {
        "challenge": "スムーススクロールの実装",
        "challengeText": "TOPからスクロール後にナビゲーションをFixedにする挙動を考慮し、適切な位置でスクロールを停止させたいと考えました。ページ内スクロールの停止位置の調整が課題となりました。",
        "solution": "GSAPのScrollToを導入し、スクロール停止位置を正確に取得しました。それでも高さのずれが生じる部分は、取得している要素の高さを一つ一つログに出力し、どの部分でずれが生じているのかを確認しました。結果、CSSの記述やHTMLの記述が原因ということが分かり、修正することで解決しました。"
      }
    ]
  },
  {
    "id": "Saving-UP(為替レートを活用した貯金計画WEBアプリ)",
    "title": "Saving-UP",
    "titleNumber": "002",
    "siteType": "為替付き電卓WEBアプリ",
    "siteUrl": "https://saving-up.ari-life.com/",
    "ProjectImge": "/savingup.png",
    "techStack": [
      "Next.js",
      "JavaScript",
      "Tailwind CSS",
      "Framer Motion(アニメーション)",
      "Figma(デザイン)",
      "Vercel(デプロイ)"
    ],
    "projectDsc": "日本円とオーストラリアドルの為替を自動取得して、目標金額までの残金などを確認できる計算サイトです。\n外部APIで為替データを取得して、サイト内の自動計算に使用しています。",
    "timeSpent": "30日間",
    "gitUrl": "https://github.com/Arilifecom/saving-up",
    "motivation": "計算をもう少しだけ楽にしたい",
    "motivationText": "オーストラリアに留学中、節約のモチベーションを維持しながら貯金額を記録する際の手間を減らすために、このWebアプリの制作を思いつきました。\n当時、電卓アプリや為替の確認を複数のアプリで行い、手動で計算していました。そこで、目標金額、貯金額、目標期日を入力することで、目標達成までに必要な額や、毎週の目標貯金額を即座に計算し、進捗を確認できるWebアプリを開発しました。",
    "focusPoints": [
      {
        "focus": "インタラクティブな体験",
        "focusText": "目標金額や貯金額を入力すると、電卓アプリのように画面上にリアルタイムで反映され、為替レートを自動で取得して計算します。これにより、無駄な入力を避け、スムーズに必要な情報を得られるよう工夫しました。"
      },
      {
        "focus": "3ステップで簡単に結果が表示",
        "focusText": "目標金額、貯金額、目標期日を入力するだけで、週ごとの必要貯金額が即座に計算されます。また、目標達成に向けて残りの金額も一目でわかるように表示され、シンプルに目標達成までの現在地が分かるようになっています。"
      }
    ],
    "challengePoints": [
      {
        "challenge": "APIキーの管理",
        "challengeText": "外部APIを利用する際、APIキーをどこに保存するかというセキュリティ上の問題に直面しました。コード内に直接入力せずAPIキーを使用する課題がありました。",
        "solution": "VercelのAPIルートを活用し、環境変数にAPIキーを登録しました。これにより、クライアントサイドにはAPIキーが露出せず、安全にAPIを利用できる設計にしました。"
      },
      {
        "challenge": "非同期処理とSSGの活用",
        "challengeText": "取得する為替データは24時間ごとに更新される仕様でしたが、リロードのたびにAPIリクエストが発生し、データの表示にタイムラグが生じていました。",
        "solution": "Next.jsのgetStaticPropsを使用し、事前にデータを取得するSSG（静的サイト生成）を導入しました。さらに、revalidate: 86400（24時間）を設定することで、一定時間内のアクセスでは同じデータを返すよう最適化しました。これにより、ページの読み込み速度が向上し、無駄なAPIリクエストを削減できました。"
      }
    ]
  },
  {
    "id": "Ari's Portfolio（ポートフォリオサイト)",
    "title": "Ari's Portfolio",
    "titleNumber": "003",
    "siteType": "ポートフォリオ＆ブログサイト",
    "siteUrl": "/",
    "ProjectImge": "/arisPortfolio.png",
    "techStack": [
      "Next.js",
      "JavaScript",
      "Tailwind CSS",
      "MicroCMS",
      "Framer Motion(アニメーション)",
      "Figma(デザイン)",
      "Vercel(デプロイ)"
    ],
    "projectDsc": "自身のポートフォリオサイトです。\nNext.jsとMicroCMSを導入し、学習ブログとしても運用しています。\nまた、今後コンテンツが増えることを見越して、拡張性を意識したコーディングを心がけました。",
    "timeSpent": "26日間",
    "gitUrl": "https://github.com/Arilifecom/ari-portfolio",
    "motivation": "制作物を記録していきたい",
    "motivationText": "これまでの制作物とその詳細を記録することを目的に、このWebサイトをポートフォリオサイトとして制作しました。\nまた、これまでの学習記録を自分にとって読みやすい形で整理したいと考え、MicroCMSを導入しました。\nこのサイトは、インプットした内容をアウトプットする場所として活用しています。\n今後も運用を続けながら、より自分が使いやすいサイトへとカスタマイズしていく予定です。",
    "focusPoints": [
      {
        "focus": "Framer Motionを使用したアニメーション",
        "focusText": "楽しんで制作している雰囲気を伝えたくて、ポップで親しみやすい印象のポートフォリオに仕上げました。サイト内のさまざまな箇所にアニメーションを取り入れています。\nTOPページでは、ランダムな位置にクラッカーが飛び出す演出や、Aboutページにはタイミングを調整して動くSVGアニメーションを設置しています。"
      },
      {
        "focus": "Next.jsとMicroCMSで、高速かつ使いやすいBlog",
        "focusText": "これまで学習記録はPagesアプリで管理していましたが、同じようにスクロールしながら目的の項目にスムーズに辿り着けるUIにしたいと考え、「無限スクロール」を導入しました。\nSSG + ISRによって初回表示は静的ページを返しつつ、CSRで次の記事を動的に読み込む構成とし、表示速度と使いやすさのバランスにこだわって制作しました。"
      }
    ],
    "challengePoints": [
      {
        "challenge": "SVGストロークアニメーション",
        "challengeText": "Aboutページの「Work Experience」セクションで、スクロールに合わせてSVGのラインを引くアニメーションを実装する際、動的な対応が課題となりました。\n今後コンテンツ（職務経歴カード）が増えた場合でも、SVGのストローク範囲を自動で調整できる仕組みが必要だと考えました。",
        "solution": "ラインを描画するSVGは、ストローク範囲を合わせたい要素（職務経歴カード）とGridレイアウトで横並びに配置していました。\nそこで、親コンテナの高さを取得し、その高さに応じてSVGの描画範囲（ストローク範囲）を動的に調整する仕組みを実装しました。これにより、職務経歴カードが増減しても、それに合わせてSVGのラインも正しく伸びるようになりました。"
      },
      {
        "challenge": "無限スクロールの挙動について",
        "challengeText": "Blogの一覧ページから記事詳細ページへ遷移し、再び一覧ページに戻った際に、スクロール位置がトップに戻ってしまうという不便さがありました。\nまた、無限スクロール機能において、すでに取得済みのデータを再度APIで取得してしまうという、無駄な通信が発生する課題もありました。",
        "solution": "スクロール位置の保持にはNext.jsのルーターイベントを活用し、ページ遷移前にsessionStorageへscrollYを保存、一覧ページ復帰時に元の位置までスクロールを復元できるようにしました。\nまた、無限スクロールで取得した記事データは、レンダリングに依存しないZustandで管理し、一度取得したデータの再取得を防ぐことで無駄なAPI通信を回避しています。"
      }
    ]
  }
]
